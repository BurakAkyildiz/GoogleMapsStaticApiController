import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;



/**
 *Kullanıcıdan alınan arama bilgilerine göre google static map api kullanarak aranan yerin fotoğrafını görüntüleyen uygulama.
 * @author Burak Akyıldız
 */
public class Gui extends javax.swing.JFrame
{

    
    
//-------------------------CONSTANTS------------------------------------------------------------------
public static final int FRAME_PADDING_LEFT_RIGHT = 25;
public static final int FRAME_PADDING_UP_DOWN = 50;
public static final int MAX_WIDTH = 640;//GoogleApiden istenebilecek maximum genişlik
public static final int MAX_HEIGHT = 640;//GoogleApiden istenebilecek maximum yükseklik
public static final int IMAGE_REFRESH_RATE = 25;//Sayfa grafiklerinin yenilenme aralığı.
//---------------------------------------------------------------------------------------------------------
//-------------------------INSTANCE VARIABLES---------------------------------------------------------
Image lblImage = null;// Aramadan elde edilen resmin sürekli boyutunun güncellenmesi resim kalitesini düşürmektedir. Bu sebeple güncel harita resmini instance variable olarak taşır.
int imageWidth_Current = 0, imageHeight_Current = 0; //Haritanın güncel boyutlarını tutar. Image nesnesinden genişlik ve uzunluk almak için imageIcon oluşturmak performans kaybına sebep olduğu için kullanılır.
int imageWidth_Original = 0, imageHeight_Original = 0;//Haritanın orjinal boyutlarını tutar.
boolean isFormResized = false;//Sayfanın boyutlarının değişip değişmediğini taşır.
//---------------------------------------------------------------------------------------------------------

    /**
     * Kullanıcı arayüzünü oluşturur.
     * Sayfanın IMAGE_REFRESH_RATE aralığında yenileneceği bir timer task başlatılır.
     */
    public Gui()
    {
        initComponents();
        
        txt_Size_Width.setDocument(new JTextFieldLimit(MAX_WIDTH));
        txt_Size_Height.setDocument(new JTextFieldLimit(MAX_HEIGHT));
        
        Timer zamanlayici = new Timer();
        TimerTask optimizedResizeTask = new TimerTask()
        {
            @Override
            public void run()
            {
                if(isFormResized)//Eğer sayfa yenilendiyse harita yenilenir.
                {
                    viewImage();
                    isFormResized = false;
                    
                }else
                       /*Sayfanın yenilenme hareketi bittikten sonra sayfa genişliği kontrol edilir. 
                                    *Eğer chck_HighScale seçili değilse harita fotoğrafından büyük bir frame oluşturulmamalıdır. 
                                    *Eğer oluşturulduysa sayfa yenilenir.
                                    *Not ;
                                    *Sayfanın bu şekilde sürekli yenilenmesinin sebebi jFrame.setMaximumSize() metodundaki sorunsal yüzündendir. 
                                    *Metod çalışmamaktadır. 
                                    *Sayfa Yenilenirken sayfanın boyutu kontrol edildiğinde resize hareketi bittikten sonra mouseRelase() çalıştığı için frame boyutu ayarlanmış olsada normalden büyük görünmektedir.
                                    */
                {
                    if(lblImage != null && !chck_HighScale.isSelected())
                    {
                        int maxWidth = imageWidth_Original + pnl_Control.getWidth() + FRAME_PADDING_LEFT_RIGHT ;
                        int maxHeight = imageHeight_Original + pnl_Adress.getHeight() + FRAME_PADDING_UP_DOWN;

                        if(maxWidth > 0 && maxHeight > 0 && (Gui.this.getWidth() > maxWidth || Gui.this.getHeight() > maxHeight))
                        {
                            Dimension size = new Dimension(maxWidth, maxHeight);
                            Gui.this.setPreferredSize(size);
                            Gui.this.setSize(maxWidth, maxHeight);
                            //Gui.this.setMaximumSize(size);
                            Gui.this.revalidate();
                            Gui.this.repaint();
                        }
                    }
                }
                
                
            }
        };
        
        
        zamanlayici.schedule(optimizedResizeTask, 0, IMAGE_REFRESH_RATE);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        radioGroup_MapType = new javax.swing.ButtonGroup();
        lbl_mapImg = new javax.swing.JLabel();
        pnl_Control = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        slider_Zoom = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        radio_road = new javax.swing.JRadioButton();
        radio_terrain = new javax.swing.JRadioButton();
        radio_satellite = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txt_Size_Width = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_Size_Height = new javax.swing.JTextField();
        btn_Goruntule = new javax.swing.JButton();
        radio_hybrid = new javax.swing.JRadioButton();
        chck_HighScale = new javax.swing.JCheckBox();
        pnl_Adress = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_Adress = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Google Maps Viewer");
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(450, 360));
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });

        lbl_mapImg.setBackground(new java.awt.Color(0, 0, 0));
        lbl_mapImg.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("YAKINLAŞTIRMA SEVIYESI");

        slider_Zoom.setMaximum(20);
        slider_Zoom.setMinimum(1);
        slider_Zoom.setValue(15);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("HARITA TÜRÜ");

        radioGroup_MapType.add(radio_road);
        radio_road.setSelected(true);
        radio_road.setText("Road Map");

        radioGroup_MapType.add(radio_terrain);
        radio_terrain.setText("Terrain");

        radioGroup_MapType.add(radio_satellite);
        radio_satellite.setText("Satellite");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("RESİM BOYUTU");

        txt_Size_Width.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                txt_Size_WidthKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("x");

        txt_Size_Height.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                txt_Size_HeightKeyTyped(evt);
            }
        });

        btn_Goruntule.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_Goruntule.setText("Görüntüle");
        btn_Goruntule.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_GoruntuleActionPerformed(evt);
            }
        });

        radioGroup_MapType.add(radio_hybrid);
        radio_hybrid.setText("Hybrid");

        chck_HighScale.setText("Yüksek Ölçeklemeye İzin Ver");
        chck_HighScale.setToolTipText("Seçildiğinde Resim Çözünürlüğünün Üstünde Ve Ekstra Çözünürlüklemeyle Haritayı Boyutlandırır.");
        chck_HighScale.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chck_HighScaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_ControlLayout = new javax.swing.GroupLayout(pnl_Control);
        pnl_Control.setLayout(pnl_ControlLayout);
        pnl_ControlLayout.setHorizontalGroup(
            pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_Zoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_Goruntule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnl_ControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_ControlLayout.createSequentialGroup()
                        .addGroup(pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radio_road, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radio_terrain, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radio_satellite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(radio_hybrid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addGroup(pnl_ControlLayout.createSequentialGroup()
                        .addComponent(txt_Size_Width, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Size_Height)
                        .addGap(19, 19, 19))))
            .addComponent(chck_HighScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnl_ControlLayout.setVerticalGroup(
            pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ControlLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slider_Zoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_road)
                    .addComponent(radio_satellite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_terrain)
                    .addComponent(radio_hybrid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_ControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_Size_Width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Size_Height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Goruntule, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 251, Short.MAX_VALUE)
                .addComponent(chck_HighScale)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ADRES VEYA KOORDINAT BİLGİSİ");

        txt_Adress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_Adress.setToolTipText("Farklı anahtarlar girmek için Virgül kullanın.");
        txt_Adress.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                txt_AdressKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnl_AdressLayout = new javax.swing.GroupLayout(pnl_Adress);
        pnl_Adress.setLayout(pnl_AdressLayout);
        pnl_AdressLayout.setHorizontalGroup(
            pnl_AdressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_Adress)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        pnl_AdressLayout.setVerticalGroup(
            pnl_AdressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_AdressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_Adress, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_Control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_mapImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pnl_Adress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_Adress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_Control, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_mapImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Resmin istenilen çözünürlük genişliğinin MAXIMUM_WIDTH den büyük girilememesini sağlar.
    private void txt_Size_WidthKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txt_Size_WidthKeyTyped
    {//GEN-HEADEREND:event_txt_Size_WidthKeyTyped
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                String text = txt_Size_Width.getText();
                if(!text.isEmpty())
                {
                    int width = Integer.parseInt(text);
                    if(width > MAX_WIDTH)
                        txt_Size_Width.setText(MAX_WIDTH+"");
                }
                
            }
        });
    }//GEN-LAST:event_txt_Size_WidthKeyTyped

    
   /*
     * Kullanıcı bilgileri tam girdiyse arama txt_Adress içerisindeki bilgiyi web encode eder ve GoogleMapsStaticApiController ile image alır.
    *Image eğer alınabilirse görüntülenir.
    *Eğer kullanıcı eksik bilgi girerse uyarılır ve hiç bir işlem yapılmaz.
     */
    private void btn_GoruntuleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_GoruntuleActionPerformed
    {//GEN-HEADEREND:event_btn_GoruntuleActionPerformed
      if(txt_Size_Height.getText().isEmpty() || txt_Size_Width.getText().isEmpty() || txt_Adress.getText().isEmpty())
          JOptionPane.showMessageDialog(this, "Lütfen Bilgilerin Tamamını Doldurun !","Uyarı !",JOptionPane.WARNING_MESSAGE);
      else{
           new Thread(new Runnable()
            {
                @Override
                public void run()
                {
                    String encodedUrl = encodeUrl(txt_Adress.getText());
                    System.out.println(encodedUrl);
                    lblImage = GoogleMapsStaticApiController.getMapImage(
                            encodedUrl,
                            slider_Zoom.getValue(),
                            txt_Size_Width.getText(),
                            txt_Size_Height.getText(),
                            getMapTypeSelection());
                    if(lblImage != null)
                    {
                        imageWidth_Original = Integer.parseInt(txt_Size_Width.getText());
                        imageHeight_Original = Integer.parseInt(txt_Size_Height.getText());
                        if(!chck_HighScale.isSelected())
                            Gui.this.setSize(imageWidth_Original + pnl_Control.getWidth() + FRAME_PADDING_LEFT_RIGHT, imageHeight_Original + pnl_Adress.getHeight() + FRAME_PADDING_UP_DOWN);
                        viewImage();
                        System.gc();
                    }
                    
                }
            }).start();
      }
    }//GEN-LAST:event_btn_GoruntuleActionPerformed
    
    //Resmin istenilen çözünürlük yüksekliğinin MAXIMUM_HEIGHT den büyük girilememesini sağlar.
    private void txt_Size_HeightKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txt_Size_HeightKeyTyped
    {//GEN-HEADEREND:event_txt_Size_HeightKeyTyped
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                String text = txt_Size_Height.getText();
                if(!text.isEmpty())
                {
                    int width = Integer.parseInt(text);
                    if(width > MAX_HEIGHT)
                        txt_Size_Height.setText(MAX_HEIGHT+"");
                }
                
            }
        });
    }//GEN-LAST:event_txt_Size_HeightKeyTyped

    //Formun yenilendiğini isFormResized değiştirerek optimizeResizeTask'ın bilgilendirilmesini sağlar.
    private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
    {//GEN-HEADEREND:event_formComponentResized
        isFormResized = true;
        evt = null;
    }//GEN-LAST:event_formComponentResized

    //Kullanıcının bastığı tuşlar kontrol edilir.
    //Eğer enter a bastı ise görüntüleme işlemi için btn_Görüntüle çalıştırılır.
    private void txt_AdressKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txt_AdressKeyTyped
    {//GEN-HEADEREND:event_txt_AdressKeyTyped
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
        {
            btn_Goruntule.doClick();
        }
    }//GEN-LAST:event_txt_AdressKeyTyped

    private void chck_HighScaleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chck_HighScaleActionPerformed
    {//GEN-HEADEREND:event_chck_HighScaleActionPerformed
        isFormResized = true;
    }//GEN-LAST:event_chck_HighScaleActionPerformed

    
    
    
    //--------------------------GRAPHICS---------------------------------------------------------------
    /**
     *lblImage içerisinde kayıtlı resmin lbl_mapImage objesinde görüntülenmesini sağlayan metod.
     * Ekranın güncel boyutuna göre image boyutu güncellenir. Güncellenirken lbl_mapImage için verilen alan baz alınır.
     * Eğer lblImage boş ise hiç bir işlem yapılmaz.
     */
    private void viewImage()
    {
        if(lblImage == null)//Eğer resim yüklenmediyse işlemi iptal eder.
            return;
        
        int viewWidth = (this.getWidth()-pnl_Control.getWidth()-FRAME_PADDING_LEFT_RIGHT);//Resmin sayfada kaplaması gereken genişlik.
        int viewHeight = (this.getHeight()-pnl_Adress.getHeight()-FRAME_PADDING_UP_DOWN);//Resmin sayfada kaplaması gereken uzunluk.
        
        //System.out.println("Viewİmage : viewW :"+viewWidth+" viewH: "+viewHeight+" - imgCurWidth :"+imageWidth_Current+" imgCurHeight :"+imageHeight_Current+"  -  imgOrjWidth :"+imageWidth_Original+" imgOrjHeight :"+imageHeight_Original);
        Image img = resize_lblImage(viewWidth, viewHeight);//Resim yeniden boyutlandırılır, güncel boyutlar saklanır ve resim gösterilir.
        if(img != null){
            ImageIcon mapIcon = new ImageIcon(img);
            lbl_mapImg.setIcon(mapIcon);
            imageHeight_Current = viewHeight;
            imageWidth_Current = viewWidth;
            
        }
        
        
    }
    
    /**
     * lblImage değişkenindeki image boyutunu alınan değerlere göre güncelleyen metod.
     * Metod 2 kademeli olarak çalışır. Eğer chck_HighScale.isSelected() == true ise yeniden boyutlandırmada grafik daha ayrıntılı oluşturulur.
     * @param w new Width
     * @param h new Height
     * @return resizedImage
     */
    private Image resize_lblImage( int w , int h)
    {
        if(lblImage == null || w < 1 || h < 1) return null;
        
        BufferedImage resizedimage = new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedimage.createGraphics();
        
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
        
        if(chck_HighScale.isSelected())// Eğer resim normalden fazla büyütülmek istenildiyse daha ayrıntılı çözünürlük sağlanır.
        {
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
            g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
        }
        
        
        g2.drawImage(lblImage, 0, 0,w,h,null);
        g2.dispose();
        g2 = null;
        return resizedimage;
    }
    //---------------------------------------------------------------------------------------------------
    
    
    
    //---------------------------DOCUMENTATION-----------------------------------------------------
    /**Kullanıcı tarafından seçilmiş olan harita tipini String gösterimiyle döndüren metod.
     * @return mapTypeString
     */
    private String getMapTypeSelection()
    {
        if(radio_road.isSelected() == true)
            return "road";
        if(radio_satellite.isSelected() == true)
            return "satellite";
        if(radio_terrain.isSelected() == true)
            return "terrain";
        if(radio_hybrid.isSelected() == true)
            return "hybrid";
        
        return "";
    }
    
    /**
     * Alınan URL yi google static map apiye uygun şekilde encode eden metod.
     * @param url google static map api için verilen url
     * @return encoded url
     */
    private String encodeUrl(String url)
    {
        StringBuilder strBuild = new StringBuilder();
        
        char[] urlC = url.toCharArray();
        for (char c : urlC) {
            if(Character.isAlphabetic(c) || Character.isDigit(c))
            {
                strBuild.append(c);
            }
            else
            switch(c)
            {
                
                //reserved
                case '!':strBuild.append("%21");break;
                case '*':strBuild.append("%2A");break;
                case '\'':strBuild.append("%5C");break;
                case '(':strBuild.append("%28");break;
                case ')':strBuild.append("%29");break;
                case ';':strBuild.append("%3B");break;
                case ':':strBuild.append("%3A");break;
                case '@':strBuild.append("%40");break;
                case '=':strBuild.append("%3D");break;
                case '+':strBuild.append("%26");break;
                case '$':strBuild.append("%24");break;
                case '/':strBuild.append("%2F");break;
                case '?':strBuild.append("%3F");break;
                case '[':strBuild.append("%5B");break;
                case ']':strBuild.append("%5D"); break;
                case '&':strBuild.append("%26");break;
                case '#':strBuild.append("%23");break;
                case '%':strBuild.append("%25");break;
                case '|':strBuild.append("%7C");break;
                case '<':strBuild.append("%3C");break;
                case '>':strBuild.append("%3E");break;
                case '"':strBuild.append("%22");break;
                case ' ':strBuild.append("%20");break;
                
                
                //unreserved
                case ',':
                case '-':
                case '_':
                case '.':
                case '~':strBuild.append(c);break;
                
                default:break;
            }
                
        }
        System.out.println("Encoded url : "+strBuild.toString());
        return strBuild.toString();
    }
    //---------------------------------------------------------------------------------------------------
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Goruntule;
    private javax.swing.JCheckBox chck_HighScale;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lbl_mapImg;
    private javax.swing.JPanel pnl_Adress;
    private javax.swing.JPanel pnl_Control;
    private javax.swing.ButtonGroup radioGroup_MapType;
    private javax.swing.JRadioButton radio_hybrid;
    private javax.swing.JRadioButton radio_road;
    private javax.swing.JRadioButton radio_satellite;
    private javax.swing.JRadioButton radio_terrain;
    private javax.swing.JSlider slider_Zoom;
    private javax.swing.JTextField txt_Adress;
    private javax.swing.JTextField txt_Size_Height;
    private javax.swing.JTextField txt_Size_Width;
    // End of variables declaration//GEN-END:variables
}

/**
 * JtextField sınıfı için text alanına yazılabilecek karakter limitlemesini yapan sınıf.
 * TextField a yazılan karakter sayısal değilse ve karakter 3. karakterden fazlası ise yazmaz.
 */
class JTextFieldLimit extends PlainDocument {
  private int limit;
  JTextFieldLimit(int limit) {//Yazılabilecek maximum sayı değeri.
    super();
    this.limit = limit;
  }
  
  public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
    
    if (str == null)
      return;
    
      int tmpNumber = -1;
      try {
          if(offset > 2) throw new Exception("Max Range Error");//Yazılacak yer kontrolü.
          tmpNumber = Integer.parseInt(str);//Sayısal girdi kontrolü.
      }
      catch (Exception e) {super.remove(offset,offset+1);}
    
    if (tmpNumber > -1 && (getLength() + str.length()) <= (""+limit).length()) {// Yazılan karakterlerin uzunluk kontrolü.
      super.insertString(offset, str, attr);
    }
  }
}